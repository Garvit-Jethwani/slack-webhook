// Test generated by RoostGPT for test slack-webhook-java using AI Type Open AI and AI Model gpt-4

package net.gpedro.integrations.slack;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

public class SlackMessage_prepare_b8ecd6e41f_Test {

    private SlackMessage slackMessage;
    private JsonObject mockSlackMessage;

    @BeforeEach
    public void setup() {
        slackMessage = Mockito.mock(SlackMessage.class);
        mockSlackMessage = new JsonObject();
        Mockito.when(slackMessage.prepare()).thenReturn(mockSlackMessage);
    }

    @Test
    public void testPrepareWithFullFields() {
        mockSlackMessage.addProperty("channel", "testChannel");
        mockSlackMessage.addProperty("username", "testUser");
        mockSlackMessage.addProperty("icon_url", "http://testIcon.com");
        mockSlackMessage.addProperty("unfurl_media", true);
        mockSlackMessage.addProperty("unfurl_links", true);
        mockSlackMessage.addProperty("link_names", true);
        mockSlackMessage.addProperty("text", "testText");
        List<Attachment> attach = new ArrayList<>();
        attach.add(new Attachment());
        mockSlackMessage.add("attachments", new JsonArray());
        assertEquals(mockSlackMessage, slackMessage.prepare());
    }

    @Test
    public void testPrepareWithMissingText() {
        mockSlackMessage.addProperty("channel", "testChannel");
        mockSlackMessage.addProperty("username", "testUser");
        assertThrows(IllegalArgumentException.class, () -> slackMessage.prepare());
    }
}
