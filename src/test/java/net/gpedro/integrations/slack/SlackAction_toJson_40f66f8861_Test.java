// Test generated by RoostGPT for test slack-webhook-java using AI Type Open AI and AI Model gpt-4

package net.gpedro.integrations.slack;

import com.google.gson.JsonObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class SlackAction_toJson_40f66f8861_Test {

    @Mock
    private SlackAction slackAction;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testToJson_withAllFields() {
        when(slackAction.getName()).thenReturn("testName");
        when(slackAction.getText()).thenReturn("testText");
        when(slackAction.getType()).thenReturn(SlackActionType.BUTTON);
        when(slackAction.getValue()).thenReturn("testValue");
        when(slackAction.getStyle()).thenReturn(SlackActionStyle.DANGER);

        JsonObject expected = new JsonObject();
        expected.addProperty("name", "testName");
        expected.addProperty("text", "testText");
        expected.addProperty("type", "button");
        expected.addProperty("value", "testValue");
        expected.addProperty("style", "danger");

        assertEquals(expected, slackAction.toJson());
    }

    @Test
    public void testToJson_withNullTypeAndStyle() {
        when(slackAction.getName()).thenReturn("testName");
        when(slackAction.getText()).thenReturn("testText");
        when(slackAction.getType()).thenReturn(null);
        when(slackAction.getValue()).thenReturn("testValue");
        when(slackAction.getStyle()).thenReturn(null);

        JsonObject expected = new JsonObject();
        expected.addProperty("name", "testName");
        expected.addProperty("text", "testText");
        expected.addProperty("value", "testValue");

        assertEquals(expected, slackAction.toJson());
    }
}
