// Test generated by RoostGPT for test slack-webhook-java using AI Type Open AI and AI Model gpt-4

package net.gpedro.integrations.slack;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class SlackField_toJson_40f66f8861_Test {

    @Mock
    SlackField slackField;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testToJson() {
        JsonObject expected = new JsonObject();
        expected.addProperty("title", "Title");
        expected.addProperty("value", "Value");
        expected.addProperty("short", true);

        when(slackField.toJson()).thenReturn(expected);

        JsonObject actual = slackField.toJson();

        assertEquals(expected, actual);
    }

    @Test
    public void testToJsonWithMarkdown() {
        JsonObject expected = new JsonObject();
        expected.addProperty("title", "Title");
        expected.addProperty("value", "Value");
        expected.addProperty("short", true);

        List<String> markdownList = new ArrayList<>();
        markdownList.add("markdownText");
        JsonArray markdownArray = new JsonArray();
        markdownArray.add(new JsonPrimitive("markdownText"));
        expected.add("mrkdwn_in", markdownArray);

        when(slackField.toJson()).thenReturn(expected);

        JsonObject actual = slackField.toJson();

        assertEquals(expected, actual);
    }
}
