// Test generated by RoostGPT for test slack-webhook-java using AI Type Open AI and AI Model gpt-4

package net.gpedro.integrations.slack;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;

public class SlackMessage_hashCode_77d48187ef_Test {

    private SlackMessage slackMessage;

    @BeforeEach
    public void setup() {
        slackMessage = Mockito.mock(SlackMessage.class);
    }

    @Test
    public void testHashCodeWithNonNullValues() {
        Mockito.when(slackMessage.getAttach()).thenReturn("attach");
        Mockito.when(slackMessage.getChannel()).thenReturn("channel");
        Mockito.when(slackMessage.getIcon()).thenReturn("icon");
        Mockito.when(slackMessage.getText()).thenReturn("text");
        Mockito.when(slackMessage.getUsername()).thenReturn("username");
        Mockito.when(slackMessage.isUnfurlMedia()).thenReturn(true);
        Mockito.when(slackMessage.isUnfurlLinks()).thenReturn(true);
        Mockito.when(slackMessage.isLinkNames()).thenReturn(true);

        int expectedHashCode = slackMessage.hashCode();
        int actualHashCode = new SlackMessage("attach", "channel", "icon", "text", "username", true, true, true).hashCode();

        Assertions.assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    public void testHashCodeWithNullValuesAndFalseBooleans() {
        Mockito.when(slackMessage.getAttach()).thenReturn(null);
        Mockito.when(slackMessage.getChannel()).thenReturn(null);
        Mockito.when(slackMessage.getIcon()).thenReturn(null);
        Mockito.when(slackMessage.getText()).thenReturn(null);
        Mockito.when(slackMessage.getUsername()).thenReturn(null);
        Mockito.when(slackMessage.isUnfurlMedia()).thenReturn(false);
        Mockito.when(slackMessage.isUnfurlLinks()).thenReturn(false);
        Mockito.when(slackMessage.isLinkNames()).thenReturn(false);

        int expectedHashCode = slackMessage.hashCode();
        int actualHashCode = new SlackMessage(null, null, null, null, null, false, false, false).hashCode();

        Assertions.assertEquals(expectedHashCode, actualHashCode);
    }
}
