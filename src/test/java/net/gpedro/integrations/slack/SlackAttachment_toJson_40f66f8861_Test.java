// Test generated by RoostGPT for test slack-webhook-java using AI Type Open AI and AI Model gpt-4

package net.gpedro.integrations.slack;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class SlackAttachment_toJson_40f66f8861_Test {

    private SlackAttachment slackAttachment;

    @BeforeEach
    public void setup() {
        slackAttachment = Mockito.mock(SlackAttachment.class);
    }

    @Test
    public void testToJsonWithNullFallback() {
        Mockito.when(slackAttachment.getFallback()).thenReturn(null);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            slackAttachment.toJson();
        });
        Assertions.assertEquals("Missing Fallback @ SlackAttachment", exception.getMessage());
    }

    @Test
    public void testToJsonWithValidData() {
        Mockito.when(slackAttachment.getFallback()).thenReturn("fallback");
        Mockito.when(slackAttachment.getText()).thenReturn("text");
        Mockito.when(slackAttachment.getPretext()).thenReturn("pretext");
        Mockito.when(slackAttachment.getColor()).thenReturn("color");
        Mockito.when(slackAttachment.getAuthorName()).thenReturn("authorName");
        Mockito.when(slackAttachment.getAuthorLink()).thenReturn("authorLink");
        Mockito.when(slackAttachment.getAuthorIcon()).thenReturn("authorIcon");
        Mockito.when(slackAttachment.getTitle()).thenReturn("title");
        Mockito.when(slackAttachment.getTitleLink()).thenReturn("titleLink");
        Mockito.when(slackAttachment.getImageUrl()).thenReturn("imageUrl");
        Mockito.when(slackAttachment.getThumbUrl()).thenReturn("thumbUrl");
        Mockito.when(slackAttachment.getMarkdownAttributes()).thenReturn(new ArrayList<>());
        Mockito.when(slackAttachment.getFields()).thenReturn(new HashSet<>());
        Mockito.when(slackAttachment.getActions()).thenReturn(new ArrayList<>());
        Mockito.when(slackAttachment.getCallbackId()).thenReturn("callbackId");
        Mockito.when(slackAttachment.getTimestamp()).thenReturn(new Date());
        Mockito.when(slackAttachment.getFooter()).thenReturn("footer");
        Mockito.when(slackAttachment.getFooterIcon()).thenReturn("footerIcon");

        JsonObject data = slackAttachment.toJson();

        Assertions.assertEquals("fallback", data.get("fallback").getAsString());
        Assertions.assertEquals("text", data.get("text").getAsString());
        Assertions.assertEquals("pretext", data.get("pretext").getAsString());
        Assertions.assertEquals("color", data.get("color").getAsString());
        Assertions.assertEquals("authorName", data.get("authorName").getAsString());
        Assertions.assertEquals("authorLink", data.get("authorLink").getAsString());
        Assertions.assertEquals("authorIcon", data.get("authorIcon").getAsString());
        Assertions.assertEquals("title", data.get("title").getAsString());
        Assertions.assertEquals("titleLink", data.get("titleLink").getAsString());
        Assertions.assertEquals("imageUrl", data.get("imageUrl").getAsString());
        Assertions.assertEquals("thumbUrl", data.get("thumbUrl").getAsString());
        Assertions.assertNotNull(data.get("markdownAttributes"));
        Assertions.assertNotNull(data.get("fields"));
        Assertions.assertNotNull(data.get("actions"));
        Assertions.assertEquals("callbackId", data.get("callbackId").getAsString());
        Assertions.assertNotNull(data.get("timestamp"));
        Assertions.assertEquals("footer", data.get("footer").getAsString());
        Assertions.assertEquals("footerIcon", data.get("footerIcon").getAsString());
    }
}
